# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'master'

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: "postgres:12"
        # Provide the credentials for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: sweatertest
        ports:
          - "5433:5432"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: |
          ~/.m2/repository
        key: ${{ runner.os }}-${{ github.workflow }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-${{ github.workflow }}-
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14
    - name: Maven Integreation
      run: mvn -B clean '-Dtest=com.example.servingwebcontent.**.*' package
    - name: show files
      run: ls
    - name: run app
      run: java -jar $(pwd)/target/testSpring-1.0-SNAPSHOT.jar --spring.profiles.active=dev  --spring.config.location=$(pwd)/src/main/resources/ &
    #- name: Start selenoid
    #  uses: Xotabu4/selenoid-github-action@v1
    - name: Install Google Chrome # Using shell script to install Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install ffmpeg || echo 1
        sudo apt-get install x11vnc || echo 1
        google-chrome --version || echo 1
        ffmpeg || echo 1
    - name: Setup xvfb (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
        # start xvfb on (default) display :0
        sudo /usr/bin/Xvfb :0.0 -screen 0 1920x1080x24 &
    - name: setup drivers
      uses: nanasess/setup-chromedriver@master
      #with:
        #Optional: do not specify to match Chrome's version
        #chromedriver-version: '90.0.4430.24'
    - name: Maven e2e
      if: always()
      run: |
        mvn -B '-Dtest=com.example.e2e.tests.SeleniumDemoTest' test  -Dvideo.enabled=true \
        -Dvideo.mode=ALL -Dvideo.save.mode=ALL -Drecorder.type=FFMPEG -Dvideo.screen.size=1920x1080 -Dffmpeg.display=:0.0 -Dffmpeg.format=x11grab
      continue-on-error: true
    - name: Get Allure history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    - name: Allure Report action from marketplace
      uses: simple-elf/allure-report-action@master
      if: always()
      id: allure-report
      with:
        allure_results: target/allure-results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history

    - name: Post the link to the report
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Test report'
        state: 'success'
        sha: ${{ github.event.pull_request.head.sha }}
        target_url: https://skeenerok.github.io/testSpringProject/${{ github.run_number }}
